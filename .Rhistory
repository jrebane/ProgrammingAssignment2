x<1:4
x <-1:4
y <- 2:3
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x <- list(2, "a", "b", TRUE)
y <- x[[1]]
class(y)
typeof(y)
clear
dir
add2 <- function(x,y) {
x + y
}
add2(3,5)
above <- function(x,n)
use <- x > n
x[use]
}
x <- 1:20
above(x>12)
above(x,n)
above <- function(x,n){
use <- x > n
x[use]
}
above(x,n)
above(x, 12)
above(x)
above <- function(x,n=10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
add2 <- function(x,y) {
x + y
}
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x,n=10){
use <- x > n
x[use]
}
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source('~/School/Kaggle/titanic/titanic.r')
?readData
?readdata
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
install.package(PET)
install.packages(PET)
install.packages("PET")
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
source('~/School/Kaggle/titanic/titanic.r')
install.packages("Amelia")
source('~/School/Kaggle/titanic/titanic.r')
barplot(table(df.train$Survived),
names.arg = c("Perished", "Survived"),
main="Survived (passenger fate)", col="black")
barplot(table(df.train$Pclass),
names.arg = c("first", "second", "third"),
main="Pclass (passenger traveling class)", col="firebrick")
barplot(table(df.train$Sex), main="Sex (gender)", col="darkviolet")
hist(df.train$Age, main="Age", xlab = NULL, col="brown")
barplot(table(df.train$SibSp), main="SibSp (siblings + spouse aboard)",
col="darkblue")
barplot(table(df.train$Parch), main="Parch (parents + kids aboard)",
col="gray50")
hist(df.train$Fare, main="Fare (fee paid for ticket[s])", xlab = NULL,
col="darkgreen")
barplot(table(df.train$Embarked),
names.arg = c("Cherbourg", "Queenstown", "Southampton"),
main="Embarked (port of embarkation)", col="sienna")
swirl()
library(swirl)
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
swirl()
cars
str(cars)
dataset$mpgCity
cars$mpgCity
myMPG <- cars$mpgCity
mean(mpg)
mean(myMPG)
median(myMPG)
table(myMPG)
mode(myMPG)
1
19
range(cars$price)
range(cares$price)
range(cars$price)
61.9 - 7.4
var(cars$price)
sd(cars$price)
20
10
25
4
summary(cars$price)
uninstall_from_swirl("Data Analysis")
uninstall("Data Analysis")
uninstall_course("Data Analysis")
swirl()
plot(child ~ parent, galton)
?plot
plot(jitter(child,4) ~ parent,galton)
?jitter
regrline <- lm(child ~ parent, galton)
?lm
abline(regrline, lwd, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages('googleVis')
install.packages(tsp)
install.packages("tsp)")
install.packages("tsp")
install.packages("TSP")
library("TSP")
data("USCA312")
tsp <- (TSP(USCA312))
tsp
tour <- solve_TSP(tsp, method = "2-opt")
tur
tour
tour
library("maps")
install.packages("maps")
install.packages("sp")
install.packages("maptools")
dat(USCA312_map)
data("USCA312_map")
library("maps")
library("maptools")
gpclibPermit()
plot_path <- function(path) {}
plot_path <- function(path) {
plot(as(USCA312_coords, "Spatial"), axes = TRUE)
plot(USCA_basemap, add = TRUE, col = "gray")
points(USCA312_coords, pch = 3, cex = 0.4, col = "red")
path_line <- SpatialLines(list(Lines(list(Line(USCA312_coords[path,])), ID = "1")))
plot(path_line, add=TRUE, col = "black")
points(USCA312_coords[c(head(path,1),tail(path,1)),], pch = 19, col = "black")
}
plot_path(path)
source('~/School/Coursera/Data_Analysis/maps.R')
plot_path(path)
?solve_TSP
source('~/School/Coursera/Data_Analysis/maps.R')
plot_path(path)
source('~/School/Coursera/Data_Analysis/maps.R')
install.packages("sqldf")
install.packages("forecast")
install.packages("pandasql")
install.packages("plyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("qcc")
install.packages("reshape2")
install.packages("randomForest")
install.packages("Hmisc")
cat?
sdf
?cat
?lm
library(datasets)
data(iris)
?iris
header(iris)
head(iris)
iris_split <- split(iris, iris$Species)
sapply(iris_split, function(x) colmeans(x[, c("Sepal.Length", "Sepal.Width")]))
sapply(iris_split, function(x) colmean(x[, c("Sepal.Length", "Sepal.Width")]))
?colmeans
?colmean
sapply(iris_split, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
q1 <- sapply(iris_split, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")]))
q1
colMeans(iris)
apply(iris,1, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
beep <- sapply(split(mtcars$hp, mtcars$cyl), mean)
beep
range(beep)
y <- range(beep)
y[2]-y[1]
debug(ls)
ls
ls()
2
exit
sdf
?browser
W
Q
undebug(ls)
ls()
dir()
makedir("assignment2")
mkdir("assignment2")
dir.create("assignment2")
dir
dir()
cd assignment2
cd "assignment2"
cd("assignment2")
setwd("~/School/Coursera/Data_Analysis/assignment2")
git clone https://github.com/jrebane/ProgrammingAssignment2.git
git init
setwd("~/School/Coursera/Data_Analysis/assignment2/ProgrammingAssignment2")
source('~/School/Coursera/Data_Analysis/assignment2/ProgrammingAssignment2/cachematrix.R')
x <- matrix(rnorm(10, 1), runif(10,2))
x <- matrix(rnorm(10, 1), runif(10))
x <- matrix(c(rnorm(10, 1), runif(10)))
x
x <- matrix(c(rnorm(10, 1), runif(10)), nrow=10, ncol=2)
x
makeCacheMatrix(x)
boom <- matrix(c(rnorm(10, 1), runif(10)), nrow=10, ncol=2)
makeCacheMatrix(boom)
source('~/School/Coursera/Data_Analysis/assignment2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(boom)
cacheSolve(boom)
cacheSolve(x)
source('~/School/Coursera/Data_Analysis/assignment2/ProgrammingAssignment2/testscript.R')
makevector()
makeVector()
